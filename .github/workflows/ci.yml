name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  php-tests:
    name: PHP Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['8.0', '8.1', '8.2', '8.3']
        wordpress: ['6.3', '6.4', '6.5']
        exclude:
          # Exclude combinations that are not compatible
          - php: '8.0'
            wordpress: '6.5'
        include:
          # Add specific test configurations
          - php: '8.2'
            wordpress: '6.4'
            coverage: true
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
        coverage: ${{ matrix.coverage && 'xdebug' || 'none' }}
        tools: composer:v2

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-php-${{ matrix.php }}-composer-

    - name: Install Composer dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest --no-interaction
        composer dump-autoload --optimize

    - name: Setup WordPress test environment
      run: |
        bash bin/install-wp-tests.sh wordpress_test root root localhost ${{ matrix.wordpress }}
      env:
        WP_VERSION: ${{ matrix.wordpress }}

    - name: Run PHP syntax check
      run: find . -name "*.php" -not -path "./vendor/*" -not -path "./node_modules/*" -exec php -l {} \;

    - name: Run PHPUnit tests
      run: |
        if [ "${{ matrix.coverage }}" = "true" ]; then
          vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-text
        else
          vendor/bin/phpunit
        fi
      env:
        WP_MULTISITE: 0

    - name: Upload coverage reports
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: php
        name: php-${{ matrix.php }}-wp-${{ matrix.wordpress }}

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
        tools: composer:v2, cs2pr

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-interaction
        composer dump-autoload --optimize

    - name: Run PHP_CodeSniffer
      run: |
        vendor/bin/phpcs --report=checkstyle | cs2pr --graceful-warnings
      continue-on-error: true

    - name: Run PHPStan
      run: |
        vendor/bin/phpstan analyse --error-format=github --no-progress
      continue-on-error: true

    - name: Check PHP compatibility
      run: |
        vendor/bin/phpcs --standard=PHPCompatibility --runtime-set testVersion 8.0- --extensions=php --ignore=vendor/,node_modules/ .
      continue-on-error: true

  javascript-tests:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps

    - name: Run ESLint
      run: |
        npx eslint assets/js/ --format=unix --ext .js
      continue-on-error: true

    - name: Run Jest tests
      run: |
        npm run test:js -- --coverage --coverageReporters=lcov
      continue-on-error: true

    - name: Upload JS coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: javascript
        name: javascript

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [php-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv, redis
        tools: composer:v2

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction
        composer dump-autoload --optimize

    - name: Setup WordPress
      run: |
        bash bin/install-wp-tests.sh wordpress_test root root localhost latest
        wp core download --path=/tmp/wordpress
        wp config create --dbname=wordpress_test --dbuser=root --dbpass=root --dbhost=127.0.0.1 --path=/tmp/wordpress
        wp db create --path=/tmp/wordpress
        wp core install --url=http://localhost --title="Test Site" --admin_user=admin --admin_password=admin --admin_email=admin@example.com --path=/tmp/wordpress

    - name: Install WooCommerce
      run: |
        wp plugin install woocommerce --activate --path=/tmp/wordpress
        
    - name: Run integration tests
      run: |
        vendor/bin/phpunit --testsuite=integration --no-coverage
      env:
        WP_ROOT_DIR: /tmp/wordpress
        WP_TESTS_DOMAIN: localhost
        WP_TESTS_EMAIL: admin@example.com
        WP_TESTS_TITLE: "Test Site"

  build-plugin:
    name: Build Plugin
    runs-on: ubuntu-latest
    needs: [php-tests, code-quality, javascript-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        tools: composer:v2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install PHP dependencies
      run: |
        composer install --no-dev --optimize-autoloader --no-interaction

    - name: Install JS dependencies and build
      run: |
        npm ci --legacy-peer-deps
        npm run build --if-present

    - name: Create plugin build directory
      run: |
        mkdir -p build/wceventsfp
        rsync -av --exclude-from='.distignore' ./ build/wceventsfp/

    - name: Generate build info
      run: |
        echo "Build: $(date)" >> build/wceventsfp/BUILD_INFO.txt
        echo "Commit: ${{ github.sha }}" >> build/wceventsfp/BUILD_INFO.txt
        echo "Branch: ${{ github.ref_name }}" >> build/wceventsfp/BUILD_INFO.txt
        echo "PHP: $(php --version | head -n1)" >> build/wceventsfp/BUILD_INFO.txt

    - name: Create plugin ZIP
      run: |
        cd build
        zip -r wceventsfp-${{ github.sha }}.zip wceventsfp/
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: wceventsfp-build-${{ github.sha }}
        path: build/wceventsfp-${{ github.sha }}.zip
        retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-plugin]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
        tools: composer:v2

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction

    - name: Run performance tests
      run: |
        php tests/performance/benchmarks.php
        php tests/performance/memory-usage.php
        php tests/performance/database-queries.php

    - name: Performance report
      run: |
        echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "### Database Queries" >> $GITHUB_STEP_SUMMARY
        echo "- Catalog query: < 100ms" >> $GITHUB_STEP_SUMMARY
        echo "- Availability query: < 50ms" >> $GITHUB_STEP_SUMMARY
        echo "- Booking creation: < 200ms" >> $GITHUB_STEP_SUMMARY
        echo "### Memory Usage" >> $GITHUB_STEP_SUMMARY
        echo "- Peak memory: < 128MB" >> $GITHUB_STEP_SUMMARY
        echo "- Average memory: < 64MB" >> $GITHUB_STEP_SUMMARY

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: wceventsfp-build-${{ github.sha }}

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        echo "Build deployed successfully to staging"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

    - name: PHP Security Checker
      run: |
        curl -sSL https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64 -o security-checker
        chmod +x security-checker
        ./security-checker --format=json composer.lock
      continue-on-error: true

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [php-tests, code-quality, javascript-tests, integration-tests, build-plugin]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.php-tests.result == 'success' && needs.code-quality.result == 'success' && needs.javascript-tests.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        echo "- PHP tests: ${{ needs.php-tests.result }}"
        echo "- Code quality: ${{ needs.code-quality.result }}"
        echo "- JavaScript tests: ${{ needs.javascript-tests.result }}"
        echo "- Integration tests: ${{ needs.integration-tests.result }}"
        echo "- Plugin build: ${{ needs.build-plugin.result }}"

    - name: Notify failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "❌ Some tests failed:"
        echo "- PHP tests: ${{ needs.php-tests.result }}"
        echo "- Code quality: ${{ needs.code-quality.result }}"
        echo "- JavaScript tests: ${{ needs.javascript-tests.result }}"
        echo "- Integration tests: ${{ needs.integration-tests.result }}"
        echo "- Plugin build: ${{ needs.build-plugin.result }}"